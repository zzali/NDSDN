#! usr/bin/env python

"""Custom topology example

Two directly connected switches plus a host for each switch:

   host --- switch --- switch --- host

Adding the 'topos' dict with a key/value pair to generate our newly defined
topology enables one to pass in '--topo=mytopo' from the command line.
"""

from mininet.topo import Topo


class ICNSDNTopology(Topo):
    "Simple topology example."

    def __init__(self):
        "Create custom topo."

        # Initialize topology
        Topo.__init__(self)

        H = xrange(1, 3)
        #S = [1, 6, 8]
        S = xrange(1, 10)
        switches = {'s%i' % i: self.addSwitch('s%i' % i) for i in S}
        hosts = {'h%i' % i: self.addHost('h%i' % i) for i in H}
        # Merge switches and hosts
        nodes = {}
        nodes.update(switches)
        nodes.update(hosts)
        # Add a host service for each switch
        host_services = {'sh%i' % i: self.addHost('sh%i' % i) for i in S}
        #links = [('s1', 's6'), ('s6', 's8'), ('h1', 's1'), ('s8', 'h2')]
        links = [('s1', 's2'), ('s1', 's3'), ('s1', 's4'), ('s1', 's6'),
                 ('s2', 's3'), ('s3', 's7'), ('s4', 's5'), ('s4', 's6'),
                 ('s4', 's7'), ('s5', 's6'), ('s6', 's7'), ('s6', 's8'),
                 ('s8', 's9'),
                 ('h1', 's1'), ('s1', 'h2')]

        for link in links:
            self.addLink(nodes[link[0]], nodes[link[1]])
        # Add link between each switch and its corresponding service host
        for i in S:
            self.addLink(nodes['s%i' % i], host_services['sh%i' % i], 100, 100)

topos = {'mytopo': (lambda: ICNSDNTopology())}
